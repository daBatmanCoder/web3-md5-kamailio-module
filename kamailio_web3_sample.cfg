#!KAMAILIO
####### Kamailio Configuration with Web3 Authentication #######
#
# This configuration demonstrates how to use the web3_auth module
# to replace traditional MD5 authentication with blockchain-based auth
#
# To use this config:
# 1. Compile and install the web3_auth module
# 2. Update the parameters below to match your setup
# 3. Replace your existing auth logic with web3_auth_check()

####### Global Parameters #########

# - kamailio runs as user "kamailio" group "kamailio"
user="kamailio"
group="kamailio"

# - listening
listen=tcp:YOUR_IP:5060
listen=udp:YOUR_IP:5060

####### Modules Section ########

# Load core modules
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

# Load the Web3 authentication module
loadmodule "web3_auth.so"

####### Module Parameters #########

# ----- Web3 Auth Module Parameters -----
# Configure your blockchain RPC endpoint and contract address
modparam("web3_auth", "rpc_url", "https://testnet.sapphire.oasis.dev")
modparam("web3_auth", "contract_address", "0x1b55e67Ce5118559672Bf9EC0564AE3A46C41000")

# ----- RR module parameters -----
modparam("rr", "enable_full_lr", 0)
modparam("rr", "append_fromtag", 0)

# ----- Registrar module parameters -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)

# ----- User Location module parameters -----
modparam("usrloc", "db_mode", 0)
modparam("usrloc", "use_domain", MULTIDOMAIN)

# ----- TM module parameters -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)

# ----- ACC module parameters -----
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)

####### Routing Logic ########

# Main SIP request routing logic
request_route {
    # Per request initial checks
    route(REQINIT);

    # Handle requests within SIP dialogs
    route(WITHINDLG);

    # -- only initial requests --

    # Handle retransmissions
    if(t_precheck_trans()) {
        t_check_trans();
        exit;
    }
    t_check_trans();

    # Handle REGISTER requests with Web3 authentication
    if(is_method("REGISTER")) {
        route(REGISTER);
        exit;
    }

    # Authentication for other requests
    route(AUTH);

    # Record routing for dialog forming requests
    if(is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    # Account only INVITEs
    if(is_method("INVITE")) {
        acc_log_request("200 call start");
    }

    # Handle routing for different methods
    if(is_method("INVITE")) {
        route(INVITE);
    } else if(is_method("MESSAGE")) {
        route(MESSAGE);
    }

    route(RELAY);
}

# Per SIP request initial checks
route[REQINIT] {
    if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent") {
        sl_send_reply("200", "OK");
        exit;
    }

    if(!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if(!has_totag()) return;

    if(loose_route()) {
        if(is_method("BYE")) {
            acc_log_request("200 call end");
        } else if(is_method("ACK")) {
            # ACK is forwarded statelessly
            route(NATMANAGE);
        } else if(is_method("NOTIFY")) {
            record_route();
        }
        route(RELAY);
        exit;
    }

    if(is_method("ACK")) {
        if(t_check_trans()) {
            route(RELAY);
            exit;
        } else {
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

# REGISTER processing with Web3 authentication
route[REGISTER] {
    if(!is_method("REGISTER")) return;

    xlog("L_INFO", "REGISTER request from $fU@$fd (source IP: $si)\n");

    # Check if this is a request without credentials (challenge needed)
    if(!has_credentials("digest")) {
        xlog("L_INFO", "No credentials provided, sending challenge\n");
        auth_challenge("$fd", "0");
        exit;
    }

    # Use Web3 authentication instead of traditional password checking
    xlog("L_INFO", "Checking Web3 authentication for user $fU\n");
    if(!web3_auth_check()) {
        xlog("L_WARN", "Web3 authentication failed for $fU@$fd from $si\n");
        auth_challenge("$fd", "0");
        exit;
    }

    xlog("L_INFO", "Web3 authentication successful for $fU@$fd\n");

    # Authentication successful, save location
    if(!save("location")) {
        sl_reply_error();
    }
    exit;
}

# Authentication for non-REGISTER requests
route[AUTH] {
    if(is_method("REGISTER") || from_uri==myself) {
        return;
    }

    if(!has_credentials("digest")) {
        auth_challenge("$fd", "0");
        exit;
    }

    # Use Web3 authentication for all requests
    if(!web3_auth_check()) {
        xlog("L_WARN", "Web3 authentication failed for $fU@$fd from $si\n");
        auth_challenge("$fd", "0");
        exit;
    }

    xlog("L_INFO", "Web3 authentication successful for $fU@$fd\n");
    return;
}

# INVITE processing
route[INVITE] {
    if(is_method("INVITE")) {
        # Lookup location for incoming requests
        if(!lookup("location")) {
            t_newtran();
            t_reply("404", "Not Found");
            exit;
        }
    }
    route(RELAY);
}

# MESSAGE processing
route[MESSAGE] {
    if(!lookup("location")) {
        t_newtran();
        t_reply("404", "Not Found");
        exit;
    }
    route(RELAY);
}

# Relay processing
route[RELAY] {
    if(!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# NAT management
route[NATMANAGE] {
    return;
}

####### Reply Route ########
reply_route {
    if(!sanity_check()) {
        xlog("Malformed SIP response from $si:$sp\n");
        drop;
    }
}

####### Failure Route ########
failure_route[MANAGE_FAILURE] {
    if(t_is_canceled()) {
        exit;
    }

    # Handle authentication failures
    if(t_check_status("401|407")) {
        exit;
    }
}

####### Sample Web3-specific configuration for different scenarios ########

# Alternative authentication route with specific realm
route[WEB3_AUTH_WITH_REALM] {
    if(!web3_auth_with_realm("sip.example.com")) {
        xlog("L_WARN", "Web3 authentication failed for realm sip.example.com\n");
        auth_challenge("sip.example.com", "0");
        exit;
    }
    return;
}

# Error handling for Web3 authentication
route[WEB3_ERROR_HANDLER] {
    xlog("L_ERR", "Web3 authentication error - falling back to challenge\n");
    auth_challenge("$fd", "0");
    exit;
} 